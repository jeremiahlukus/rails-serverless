#!/bin/sh
set -e

RAILS_ENV=${RAILS_ENV-production}

AWS_REGION=${AWS_REGION-$(aws configure get region || echo 'us-east-1')}
AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
IMAGE_REPOSITORY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/rails"
SSM_BASE_PATH="/RailsApp/$AWS_REGION"

if [ "$CI" != "true" ]; then
  echo "== Cleaning dev dependencies for local deploy. Run ./bin/setup again afterward! =="
  rm -rf ./.bundle \
         ./vendor/bundle
fi

# echo '== Fetch Security Groups, Subnets and VPC. =='
# # Fetch subnet IDs from SSM Parameter Store
# SUBNET_IDS=$(aws ssm get-parameter --name "${SSM_BASE_PATH}/SUBNET_IDS" --query "Parameter.Value" --output text --region $AWS_REGION)
# if [ $? -ne 0 ]; then
#     echo "Failed to fetch SUBNET_IDS from SSM"
#     exit 1
# fi

# # Fetch subnet IDs from SSM Parameter Store
# VPC_ID=$(aws ssm get-parameter --name "${SSM_BASE_PATH}/VPC_ID" --query "Parameter.Value" --output text --region $AWS_REGION)
# if [ $? -ne 0 ]; then
#     echo "Failed to fetch VPC from SSM"
#     exit 1
# fi


# # Fetch the IDs for both security groups separately to ensure each query works
# SG_ID1=$(aws ec2 describe-security-groups \
#     --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=lambda-open-$RAILS_ENV" \
#     --query 'SecurityGroups[*].GroupId' \
#     --output text)

# SG_ID2=$(aws ec2 describe-security-groups \
#     --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=lambda-rds-$RAILS_ENV" \
#     --query 'SecurityGroups[*].GroupId' \
#     --output text)

# # Concatenate the results
# SG_IDS="$SG_ID1, $SG_ID2"


# # Check if the variable is captured correctly
# if [ -z "$SG_IDS" ]; then
#     echo "No Security Groups found."
#     exit 1
# else
#     echo "Captured Security Group IDs: $SG_IDS"
# fi

echo '== Create ECR Repo if needed. =='
aws ecr describe-repositories \
  --repository-names "rails" \
  --region "$AWS_REGION" > /dev/null || \
aws ecr create-repository \
  --repository-name "rails" \
  --image-tag-mutability "MUTABLE" \
  --image-scanning-configuration "scanOnPush=true" \
  --region "$AWS_REGION" > /dev/null || true

echo '== Bundle For Deployment =='
bundle config --global silence_root_warning true
bundle config --local deployment true
# bundle config --local without 'development test'
bundle config --local path './vendor/bundle'
bundle install --quiet --jobs 4

echo "== Asset Hosts & Precompiling =="
NODE_ENV='production' ./bin/rails assets:precompile

if [ "$CI" = "true" ]; then
  echo "== Cleanup Unused Files & Directories =="
  rm -rf \
    log \
    node_modules \
    test \
    tmp \
    vendor/bundle/ruby/*/cache
fi

echo "== SAM build =="
sam build  \
  --debug \
  --parallel \
  --parameter-overrides \
    RailsEnv="${RAILS_ENV}"

echo "== SAM package =="
sam package \
  --s3-bucket "railsapp-$AWS_REGION" \
  --region "$AWS_REGION" \
  --template-file ./.aws-sam/build/template.yaml \
  --output-template-file ./.aws-sam/build/packaged.yaml \
  --image-repository "$IMAGE_REPOSITORY"

echo "== SAM deploy =="
sam deploy \
  --region "$AWS_REGION" \
  --template-file ./.aws-sam/build/packaged.yaml \
  --stack-name "RailsApp-lamby-${RAILS_ENV}" \
  --image-repository "$IMAGE_REPOSITORY" \
  --capabilities "CAPABILITY_IAM" \
  --parameter-overrides RailsEnv="${RAILS_ENV}"  

  # --parameter-overrides \
  #   RailsEnv="${RAILS_ENV}" "SubnetIds=\"$SUBNET_IDS\"" "SecurityGroupIds=\"$SG_IDS\""

if [ "$CI" != "true" ]; then
  echo "== Cleaning prod deploy dependencies from local. =="
  rm -rf ./.bundle \
         ./vendor/bundle \
         ./node_modules \
         ./public/assets
fi